#Installing kubenetes

-- https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

#Debian

-- You can easily install kubernetes using MINIKUBE

-- wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
-- chmod +x minikube-linux-amd64
-- sudo mv minikube-linux-amd64 /usr/local/bin/minikube
-- sudo apt install conntrack
#setup
-- minikube start --driver=none (this will create a ~/.kube/config file with requesite certificates)
-- kubectl apply -f config-secret.yml 
#alternatively 

-- sudo apt-get update && sudo apt-get install -y apt-transport-https curl
-- curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
-- cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
    deb https://apt.kubernetes.io/ kubernetes-xenial main
    EOF
-- sudo apt-get update
-- sudo apt-get install -y kubelet kubeadm kubectl
-- sudo apt-mark hold kubelet kubeadm kubectl

#Getting all the info in the kubenetes infra
-- kubectl get all

#setting up environment
-- ensure the secret file is created first
-- kubectl apply -f config_with_secret.yml
-- kubectl get secret (ensure it is there)

#secondly

-- ensure to create any config maps 
-- kubectl apply -f configmap.yml



#Service

-- You can create the Service config file in the same file as the Deployment confifs
-- if done as above

RUN

-- kubectl apply -f mango.yml
-- kubectl get service

#To check if the service is connected to the right pod
-- kubectl describe service {service_name}
-- kubectl get pod -o wide
-- check for the 'EndPoints' IP and port match the output of 'get pod -o wide' IP

#ConfigMaps
-- These are files used to keep track of addresses of shared resources e.g. IP addresses for database servers which multiple services rely on

#Creating a service to be accessible in the public WAN

---

apiVersion: v1
kind: Service
metadata:
    name: mongo-express-service
spec:
    selector:
      app: mongo-express
    type: LoadBalancer
    ports:
      - protocol: TCP
        port: 8081
        targetPort: 8081
        nodePort: 30000

The type load balancer: means that the service will be given both an internal and external IP from which it can be accessible on the browser

** ClusterIP ** this is an internal IP each service is given but can only be used within the pod

#Accessing a pod
-- kubectl exec -it {pod_id} -- /bin/sh

#Creating an image to depoloy
-- cd into the folder with the Dockerfile
-- docker build -t antonyngayo5028/antonyng:v1 .	
-- docker login docker.io 				
-- docker push antonyngayo5028/antony/goapp:v1   #This is pushing the created image to the cloud for easy retrieval

#deploying to a kubernetes cluster

-- kubectl create deployment hello-go --image=antonyngayo5028/antonyng:v1
-- kubectl get deployment hello-word
OR
-- kubectl get pod -l app=hello-go

== IN CASE OF AN ERROR
-- kubectl describe pod -l app=hello-go   #This print logs associated with the deployment

#Exposing the appropriate ports to access the services 

-- kubectl expose deployment hello-go --port=80 --target-port=8180 --type=NodePort  #Target port is the port on the container that is open

#Gert service Information
-- kubectl get service hello-go

results: hello-go   NodePort   10.108.238.145   <none>        80:32123/TCP   60s

#Get kubernetes IP
-- minikube ip

#Access on Web UI
-- http://172.17.72.198:32123/

#If we want multiple replicas of the same application running, we can easily edit the deployment 
-- kubectl edit deployment hello-go
-- search for "spec"
-- locate "replicas" and append 3
#Confirm
-- kubectl get pods -l app=hello-go
#Check Logs 
-- kubectl logs -f -l app=hello=go --prefix=true # this will show which pod is actually handling the request
