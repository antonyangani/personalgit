# Flushing Binary logs 

== This deletes binary logs which are in /var/lib/mysql folder based on date selected
-- mysql -u root -p
-- purge binary logs before '2021-06-10 00:00:00';


OR 

-- mysqladmin -u username -p flush-logs 	# This deletes binary logs older than 3 days


#importing huge files into the database

-- mysql -u username -p database_name < file.sql
(It will prompt for a password after which it will start the installation process)
#Changing root password

-- ALTER USER 'root'@'localhost' IDENTIFIED BY '**5028**';
-- FLUSH PRIVILEGES;

#Limiting query execution time

-- open /etc/my.cnf
-- ADD the following 

[mysqld]
log-error=/var/lib/mysql/cpanel.ufaa.co.ke.err
performance-schema=0
innodb_file_per_table=1
max_allowed_packet=268435456
open_files_limit=10000
innodb_buffer_pool_size = 3072M
innodb_flush_log_at_trx_commit = 0
innodb_flush_method = O_DIRECT
max-statement-time=15

-- IMPORTANT

-- max-statement-time=15 ( limits the time query can run before stalling the entire system )

#Dumping SQL
-- mysqldump -u user -p databasename > path_to_export_file.sql

#repairing a corrupt db

-- https://forums.cpanel.net/resources/innodb-corruption-repair-guide.395/

-- Make a backup of the entire /var/lib/mysql
-- chown -R mysql:mysql /var/lib/mysql

#Using Triggers
**Syntax is key when creating Triggers**

EXAMPLE

#Update Trigger

delimiter $$
create trigger likes_insert
after insert on likes_table
for each row
begin
    update post_table set likes = likes + 1 where post_id = new.post_id;
end$$
delimiter ;

#Delete Trigger

delimiter $$
create trigger likes_delete
after delete on likes_table
for each row
begin
    update post_table set likes = likes - 1 where post_id = old.post_id;
end$$
delimiter ;


** the space after the delimiter keyword is important **
-- Triggers can make running queries faster especially when handling huge databases
-- triggers are database specific

#View all Triggers in a database
-- log into a database
-- show triggers;
-- the latter will display all triggers in play within the database

#Delete a trigger
-- drop trigger {trigger_name}

#Loging queries to determine problem

-- open my.cnf in /etc/mysql

add

-- general_log_file = /var/log/mysql.log
-- general_log = 1

#Creating a remote user connection

-- CREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypass';
-- CREATE USER 'myuser'@'%' IDENTIFIED BY 'mypass';
-- GRANT ALL ON *.* TO 'myuser'@'localhost';
-- GRANT ALL ON *.* TO 'myuser'@'%';
-- flush privileges;

NAVIGATE TO:

-- vi /etc/mysql/mariadb.conf.d/50-server.cnf
-- comment # bind-address = 127.0.0.1
-- systemctl stop mysql
-- systemctl start mysql

#TEST

-- mysql -h IP_ADDR -u user_name -p

# Writing contents of a db_table to a file
-- mysql -uuser -ppass -e "SELECT id, name FROM person WHERE name like '%smith%'" database > smiths.txt
OR

LOG INTO MYSQL

-- SELECT id, name INTO OUTFILE '/tmp/smiths.txt' FROM person WHERE name like '%smith%';

SHOWING MYSQL QUERIES
-- mysqladmin proc stat

#Getting DB sizes
-- SELECT table_schema AS "Database", 
ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS "Size (MB)" 
FROM information_schema.TABLES 
GROUP BY table_schema;

#REPLICATION (MASTER-SLAVE)
== CREATING MASTER

[mysqld]
bind-address            = 62.12.118.236
server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
binlog_do_db            = anthony

CENTOS 7 CONFIG

== CREATING MASTER

[mysqld]
bind-address            = 0.0.0.0
server-id               = 1
binlog-do-db            = anthony
relay-log               = /var/lib/mysql/mysql-relay-bin
relay-log-index         = /var/lib/mysql/mysql-relay-bin.index
log-error               = /var/lib/mysql/mysql.err
master-info-file        = /var/lib/mysql/mysql-master.info
relay-log-info-file     = /var/lib/mysql/mysql-relay-log.info
log-bin                 = /var/lib/mysql/mysql-bin

Log into MySQL
-- GRANT REPLICATION SLAVE ON *.* TO 'slave_user'@'%' IDENTIFIED BY 'M@w1ngu!';
-- FLUSH PRIVILEGES;
-- use anthony;
-- IF YOU NEED TO TAKE A BACKUP
-- SHOW MASTER STATUS;

OUTPUT

+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      595 | anthony      |                  |                   |
+------------------+----------+--------------+------------------+-------------------+

Slave DB will start replicating at Position 595


== You need to dump the db so as to import it in the slave
-- FLUSH TABLES WITH READ LOCK;

OPEN a new terminal and log into the master sql server AGAIN and dump

-- mysqldump -u root -p --opt anthony > anthony.sql
-- UNLOCK TABLES;
-- quit;

== CREATING SLAVE

-- create database anthony;
-- import database from master 
-- sudo vim /etc/mysql/my.cnf

== PASTE

[mysqld]
bind-address            = 62.12.117.139
server-id               = 2
log_bin                 = /var/log/mysql/mysql-bin.log
binlog_do_db            = anthony


-- systemctl restart mysql
== Remember the File and position of the table from the master server mysql-bin.000001 & 595 respectively, put them in the command Below:
-- mysql
-- CHANGE MASTER TO MASTER_HOST='62.12.118.236',MASTER_USER='slave_user', MASTER_PASSWORD='M@w1ngu!', MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=  595;
-- START SLAVE;
-- SHOW SLAVE STATUS\G

RESULTS


MariaDB [(none)]> SHOW SLAVE STATUS\G
*************************** 1. row ***************************
                Slave_IO_State: Connecting to master
                   Master_Host: 62.12.118.236
                   Master_User: slave_user
                   Master_Port: 3306
                 Connect_Retry: 60
               Master_Log_File: mysql-bin.000001
           Read_Master_Log_Pos: 595
                Relay_Log_File: mysqld-relay-bin.000001
                 Relay_Log_Pos: 4
         Relay_Master_Log_File: mysql-bin.000001
              Slave_IO_Running: Connecting
             Slave_SQL_Running: Yes
               Replicate_Do_DB:
           Replicate_Ignore_DB:
            Replicate_Do_Table:
        Replicate_Ignore_Table:
       Replicate_Wild_Do_Table:
   Replicate_Wild_Ignore_Table:
                    Last_Errno: 0
                    Last_Error:
                  Skip_Counter: 0
           Exec_Master_Log_Pos: 595
               Relay_Log_Space: 256
               Until_Condition: None
                Until_Log_File:
                 Until_Log_Pos: 0
            Master_SSL_Allowed: No
            Master_SSL_CA_File:
            Master_SSL_CA_Path:
               Master_SSL_Cert:
             Master_SSL_Cipher:
                Master_SSL_Key:
         Seconds_Behind_Master: NULL
 Master_SSL_Verify_Server_Cert: No
                 Last_IO_Errno: 0
                 Last_IO_Error:
                Last_SQL_Errno: 0
                Last_SQL_Error:
   Replicate_Ignore_Server_Ids:
              Master_Server_Id: 0
                Master_SSL_Crl:
            Master_SSL_Crlpath:
                    Using_Gtid: No
                   Gtid_IO_Pos:
       Replicate_Do_Domain_Ids:
   Replicate_Ignore_Domain_Ids:
                 Parallel_Mode: conservative
                     SQL_Delay: 0
           SQL_Remaining_Delay: NULL
       Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it
              Slave_DDL_Groups: 0
Slave_Non_Transactional_Groups: 0
    Slave_Transactional_Groups: 0
1 row in set (0.000 sec)

#MASTER-MASTER REPLICATION (MIRRORING)
-- https://www.ryadel.com/en/mysql-master-master-replication-setup-in-5-easy-steps/
